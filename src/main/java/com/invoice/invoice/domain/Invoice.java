package com.invoice.invoice.domain;import jakarta.persistence.*;import jakarta.validation.constraints.NotNull;import lombok.*;import org.hibernate.annotations.GenericGenerator;import java.io.Serializable;import java.math.BigDecimal;import java.time.LocalDate;import java.util.*;@Entity@Table(name = "invoice")@Getter@Setter@AllArgsConstructor@NoArgsConstructorpublic class Invoice implements Serializable {    @Id    @GeneratedValue(generator = "UUID", strategy = GenerationType.IDENTITY)    @GenericGenerator(            name = "UUID",            strategy = "org.hibernate.id.UUIDGenerator"    )    private UUID id;    @NotNull    @Column(name = "description")    private String description;    @NotNull    @Column(name = "invoice_number")    private String invoiceNumber;    @NotNull    @Column(name = "date")    private LocalDate date;   @NotNull   @Column(name = "client")    private String client;    @OneToMany(mappedBy = "invoice",cascade = CascadeType.ALL, orphanRemoval = true)    private Set<InvoiceItem> items = new HashSet<>();    public void addItem(InvoiceItem item) {        items.add(item);    }    public BigDecimal getTotal(){       return items.stream()                .map(item -> BigDecimal.valueOf(item.getQuantity()).multiply(item.getUnitPrice()))                .reduce(BigDecimal.ZERO, BigDecimal::add);    }}