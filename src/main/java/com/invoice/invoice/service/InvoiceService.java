package com.invoice.invoice.service;import com.invoice.invoice.domain.Invoice;import com.invoice.invoice.domain.InvoiceItem;import com.invoice.invoice.dto.InvoiceToListDTO;import com.invoice.invoice.dto.InvoiceToCreateDTO;import com.invoice.invoice.repository.InvoiceRepository;import jakarta.transaction.Transactional;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.*;import java.util.stream.Collectors;@Service@Transactionalpublic class InvoiceService {    @Autowired    private InvoiceRepository repository;    public Invoice create(InvoiceToCreateDTO invoiceToCreateDTO){        Invoice invoice = new Invoice();        invoice.setInvoiceNumber(invoiceToCreateDTO.getInvoiceNumber());        invoice.setDate(invoiceToCreateDTO.getDate());        invoice.setDescription(invoiceToCreateDTO.getDescription());        invoice.setClient(invoiceToCreateDTO.getClient());        if(invoiceToCreateDTO.getItems() != null && !invoiceToCreateDTO.getItems().isEmpty()){            invoiceToCreateDTO.getItems().forEach(invoiceItem -> {                InvoiceItem invoiceItemToSave = new InvoiceItem();                invoiceItemToSave.setInvoice(invoice);                invoiceItemToSave.setName(invoiceItem.getName());                invoiceItemToSave.setQuantity(invoiceItem.getQuantity());                invoiceItemToSave.setUnitPrice(invoiceItem.getUnitPrice());                invoice.addItem(invoiceItemToSave);            });        }        return repository.save(invoice);    }    public Invoice update(Invoice invoiceToUpdate){        return repository.save(invoiceToUpdate);    }    public List<InvoiceToListDTO> getAll(String invoiceNumber){        return repository.findAll().stream()                .filter(invoice -> invoiceNumber == null || invoiceNumber.equals(invoice.getInvoiceNumber()))                .map(this::mapToDTO)                .collect(Collectors.toList());    }    private InvoiceToListDTO mapToDTO(Invoice invoice) {        InvoiceToListDTO dto = new InvoiceToListDTO();        dto.setId(invoice.getId());        dto.setInvoiceNumber(invoice.getInvoiceNumber());        dto.setDate(invoice.getDate());        dto.setClient(invoice.getClient());        dto.setDescription(invoice.getDescription());        dto.setTotal(invoice.getTotal());        return dto;    }    public void deleteById(UUID id){        repository.deleteById(id);    }    public Optional<Invoice> findById(UUID id) {        return repository.findById(id);    }}